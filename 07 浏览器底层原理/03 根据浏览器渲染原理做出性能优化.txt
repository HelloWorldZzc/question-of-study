性能优化：
    1、减少http请求的次数和大小
    2、资源合并压缩（避免多次link，在task queue中任务队列过多）
    3、图片的懒加载
    4、音视频走流文件

由于DOM的重绘和回流做出一些性能优化（避免DOM回流）：
    1、放弃传统的操作DOM方式，使用vue/react开始数据影响视图模式
    2、分离读写操作（现在的浏览器都有渲染队列的机制）
        例如：a.a=1
             a.b=2
             a.c=3
             console.log("123")
            这样只会渲染一次，因为是连续的，加上浏览器有渲染队列的机制
        例如：a.a=1
             console.log("123")
             a.b=2
             a.c=3
             这样会渲染2次，因为中间加了一个输出，打断了连续渲染，所以需要渲染两次
    3、样式集中改变
    4、动画效果应该用到position属性为absolute（脱离文档流）
    5、牺牲平滑度换区速度
        例如一次向左移动1px，一共移动100px，需要100次，平滑度高
        但一次移动10px，只是需要移动10次，虽然平滑度不高，但是速度高
    6、避免table布局和使用css的JavaScript表达式
    7、css3硬件加速（GPU速度）
        比起考虑如何减少回流重绘，我们更期望的是，根本不需要回流重绘
        transform，opacity，filters这些属性都会触发硬件加速，不会引发回流和重绘
        但可能会引发的坑：过多使用会占用大量内存，性能消耗严重，有时会导致字体模糊等...
