//首先这个概念，是从一个面试题中获得到的

let x = 10;
let foo = () => {
    console.log(x);
    let x = 20;
    x++;
}
foo();

//输出的结果会报错，这是为什么呢，明明语法上面有没有问题，这涉及到了let的一个属性，叫暂时性死区
//只要块级作用域内存在let命令，那么它所声明的变量就绑定了这个区域，不会受到外部的影响，这情况呢，也叫做let的暂时性死区

/**
 * 理解：
 *  要是没有 let x=20这一句，那么会输出什么？输出10，因为块级作用域没有此变量，会向上级寻找变量，上面有变量10，因此会输出10
 *
 *  要是把 let x=20改成var x=20，由于变量的提前提升，变量还没有完成定义，因此会输出undefined
 *
 *  按照本题的逻辑，块级作用域内存在let，那么let的这个变量就与此区域进行绑定了，在他之前就进行输出，又不能向外部区域寻找，又不会提前声明变量，那么就只能报错
 *
 *
 */
