这是什么？--->类似于生命周期，依据js出生的那一刻起，记录了一些列浏览器按照顺序做的事
        ---->创建document对象==>文档解析完==>文档解析完加载完执行完

1、创建document对象，开始解析web界面。
        解析HTML元素和他们的文本内容后添加element对象和text节点到文档中 document.readyState="loading"

2、遇到link外部的css
    创建线程，经常异步加载，并继续解析文档

3、遇到script外部js(没有设置async，defer)
    浏览器同步加载，并阻塞，等待js加载完并执行该脚本，然后继续解析文档

4、遇到script外部js(设置async，defer)
    浏览器创建线程异步加载，并继续解析文档
    对于async属性的脚本，脚本加载完后立即执行

5、遇到img等（带有src），先正常解析DOM结构，然后浏览器异步加载src，并继续解析文档

6、当文档解析完成（domTree建立完毕，不是加载完毕） document.readyState="interactive"

7、文档解析完之后，所有设置有defer的脚本会按照时间顺序执行

8、document对象触发DOM contentLoaded事件，这也标志着程序执行从同步脚本执行阶段，转化为事件驱动阶段

9、当所有async脚本加载并执行完成后，img等资源加载完成以后（页面所有的都执行加载完成之后），document.readyState="complete"
    window对象化触发load事件

10 从此，以异步响应方式处理用户输入，网络事件等
